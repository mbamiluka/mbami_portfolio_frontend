{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst apiUrl = process.env.REACT_APP_MBAMI_PORTFOLIO_BACKEND_URL_DEVELOPMENT;\nconst useGetExperiences = type => {\n  _s();\n  const [experiences, setExperiences] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchExperiences = async () => {\n      try {\n        const response = await fetch(`${apiUrl}/api/v1/experience?expType=${type}`);\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setExperiences(data);\n        console.log(data);\n        console.log(`${apiUrl}/api/v1/experience?expType=${type}`);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchExperiences();\n  }, [type]);\n  return {\n    experiences,\n    loading,\n    error\n  };\n};\n_s(useGetExperiences, \"CgLJLCP44L/oERvvlhNVqli79vU=\");\nexport default useGetExperiences;","map":{"version":3,"names":["useState","useEffect","apiUrl","process","env","REACT_APP_MBAMI_PORTFOLIO_BACKEND_URL_DEVELOPMENT","useGetExperiences","type","_s","experiences","setExperiences","loading","setLoading","error","setError","fetchExperiences","response","fetch","ok","Error","data","json","console","log"],"sources":["E:/projects/mbami_portfolio/frontend/src/hooks/useGetExperience.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst apiUrl = process.env.REACT_APP_MBAMI_PORTFOLIO_BACKEND_URL_DEVELOPMENT;\r\n\r\nconst useGetExperiences = (type) => {\r\n\tconst [experiences, setExperiences] = useState([]);\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchExperiences = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(`${apiUrl}/api/v1/experience?expType=${type}`);\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tthrow new Error(\"Network response was not ok\");\r\n\t\t\t\t}\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tsetExperiences(data);\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tconsole.log(`${apiUrl}/api/v1/experience?expType=${type}`);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tsetError(error);\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfetchExperiences();\r\n\t}, [type]);\r\n\r\n\treturn { experiences, loading, error };\r\n};\r\n\r\nexport default useGetExperiences;\r\n\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iDAAiD;AAE5E,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACf,MAAMc,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEf,MAAO,8BAA6BK,IAAK,EAAC,CAAC;QAC3E,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;UACjB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAC/C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCX,cAAc,CAACU,IAAI,CAAC;QACpBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjBE,OAAO,CAACC,GAAG,CAAE,GAAErB,MAAO,8BAA6BK,IAAK,EAAC,CAAC;MAC3D,CAAC,CAAC,OAAOM,KAAK,EAAE;QACfC,QAAQ,CAACD,KAAK,CAAC;MAChB,CAAC,SAAS;QACTD,UAAU,CAAC,KAAK,CAAC;MAClB;IACD,CAAC;IAEDG,gBAAgB,CAAC,CAAC;EACnB,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;EAEV,OAAO;IAAEE,WAAW;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACvC,CAAC;AAACL,EAAA,CA3BIF,iBAAiB;AA6BvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}